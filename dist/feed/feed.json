{
  "version": "https://jsonfeed.org/version/1",
  "title": "11r",
  "home_page_url": "https://reeseschultz.github.io",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "america&#39;s favorite eleventy blog template",
  "author": {
    "name": "Reese Schultz",
    "url": "https://reeseschultz.github.io"
  },
  "items": [{
      "id": "https://reeseschultz.github.io/11r/post/compilar-un-kernel-linux-a-medida./",
      "url": "https://reeseschultz.github.io/11r/post/compilar-un-kernel-linux-a-medida./",
      "title": "Compilar un Kernel linux a medida.",
      "content_html": "<p>Antes que nada, crearemos un directorio de trabajo, donde descargaremos el kérnel y trabajaremos con él.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/kernel<br><span class=\"token builtin class-name\">cd</span> ~/kernel</code></pre>\n<p>Instalamos las herramientas de compilación:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential qtbase5-dev</code></pre>\n<p>Añadimos al <code>sources.list</code> el repositorio de bullseye-backports y con el siguiente comando podremos ver las versiones disponibles del kernel:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">      ~/kernel$ sudo apt policy linux-source<br>linux-source:<br>  Instalados: (ninguno)<br>  Candidato:  5.10.149-2<br>  Tabla de versión:<br>     6.0.3-1~bpo11+1 100<br>        100 http://deb.debian.org/debian bullseye-backports/main amd64 Packages<br>     5.19.11-1~bpo11+1 100<br>        100 http://deb.debian.org/debian bullseye-backports/main amd64 Packages<br>     5.18.16-1~bpo11+1 100<br>        100 http://deb.debian.org/debian bullseye-backports/main amd64 Packages<br>     5.10.149-2 500<br>        500 http://security.debian.org/debian-security bullseye-security/main amd64 Packages<br>     5.10.140-1 500<br>        500 http://deb.debian.org/debian bullseye/main amd64 Packages<br>     5.10.136-1 500<br>        500 http://security.debian.org/debian-security bullseye-security/main amd64 Packages<br>     5.10.127-2 500<br>        500 http://deb.debian.org/debian bullseye/main amd64 Packages<br>        500 http://security.debian.org/debian-security bullseye-security/main amd64 Packages<br>     5.10.120-1 500<br>        500 http://security.debian.org/debian-security bullseye-security/main amd64 Packages<br>     5.10.113-1 500<br>        500 http://security.debian.org/debian-security bullseye-security/main amd64 Packages<br>     5.10.103-1 500<br>        500 http://security.debian.org/debian-security bullseye-security/main amd64 Packages</code></pre>\n<p>usaremos la versión del kernel 6.0.3.1. Para descargar el kernel con la versión que vamos a utilizar, usamos el siguiente comando:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> linux-source<span class=\"token operator\">=</span><span class=\"token number\">6.0</span>.3-1~bpo11+1</code></pre>\n<p>movemos a nuestro directorio el archivo que se ha descargado. A mí se me ha descargado en <em>/usr/src</em>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/src/linux-source-6.0.tar.xz ./</code></pre>\n<p>Tenemos que desempaquetarlo, para ello usaremos tar:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -xf ./linux-source-6.0.tar.xz</code></pre>\n<p>Como podemos ver, ya tenemos listo el kernel para trabajar con él.</p>\n<p><img src=\"/img/ASO-P6.1.png\" alt=\"ASO-P6.1.png\"></p>\n<p>A la hora de compilar el kernel, necesitamos el archivo .config el cual se van a cargar de forma estática los modulos del kernel. Cogeremos de referencia el <code>.config</code> de nuestro kernel. Ejecutaremos el siguiente comando para ello:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> oldconfig</code></pre>\n<p>Al ejecutar el make, nos pregunta si queremos incluir componentes adicionales, como la idea es hacer el kernel lo más pequeño posible, le daremos a todo que no. Como podemos ver, en el primer comando muestra los módulos que se han enlazado estáticamente(=y) y el segundo los que se han enlazado dinámicamente(=m).</p>\n<p><img src=\"/img/ASO-P6.2.png\" alt=\"ASO-P6.2.png\"></p>\n<p>Como podemos apreciar son un total de unos 5700 módulos enlazados, para seguir quitando módulos, usaremos el siguiente comando para quitar aquellos que no están activos:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> localmodconfig</code></pre>\n<p>Cuando se ejecuta el comando, vuelve a preguntar si queremos enlazar algun componente, para seguir descartando componentes, le he seguido dando a no. Volvemos a contar cuantos módulos tenemos:</p>\n<p><img src=\"/img/ASO-P6.3.png\" alt=\"ASO-P6.3.png\"></p>\n<p>Ahora, ya tenemos menos de 2000 módulos enlazados, sigue siendo una cantidad alta pero hemos reducido a más de la mitad los módulos enlazados.</p>\n<p>Dicho esto, empezaremos nuestra primera compilación, así verificaremos que funciona todo.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">alemd@debian:~/kernel/linux-source-6.0$ <span class=\"token function\">make</span> -j4 bindeb-pkg<br>  SYNC    include/config/auto.conf.cmd<br>  UPD     include/config/kernel.release<br><span class=\"token function\">sh</span> ./scripts/package/mkdebian<br>dpkg-buildpackage -r<span class=\"token string\">\"fakeroot -u\"</span> -a<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> debian/arch<span class=\"token variable\">)</span></span>  -b -nc -uc<br>dpkg-buildpackage: información: paquete fuente linux-upstream<br>dpkg-buildpackage: información: versión de las fuentes <span class=\"token number\">6.0</span>.3-1<br>dpkg-buildpackage: información: distribución de las fuentes bullseye<br>dpkg-buildpackage: información: fuentes modificadas por alemd <span class=\"token operator\">&lt;</span>alemd@debian<span class=\"token operator\">></span><br>dpkg-buildpackage: información: arquitectura del sistema amd64<br> dpkg-source --before-build <span class=\"token builtin class-name\">.</span><br> debian/rules binary<br><span class=\"token function\">make</span> <span class=\"token assign-left variable\">KERNELRELEASE</span><span class=\"token operator\">=</span><span class=\"token number\">6.0</span>.3 <span class=\"token assign-left variable\">ARCH</span><span class=\"token operator\">=</span>x86 \t<span class=\"token assign-left variable\">KBUILD_BUILD_VERSION</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -f ./Makefile<br>  SYSHDR  arch/x86/include/generated/uapi/asm/unistd_32.h<br>  SYSHDR  arch/x86/include/generated/uapi/asm/unistd_64.h<br>  WRAP    arch/x86/include/generated/uapi/asm/bpf_perf_event.h<br>  WRAP    arch/x86/include/generated/uapi/asm/errno.h<br>  HOSTCC  arch/x86/tools/relocs_32.o<br>  WRAP    arch/x86/include/generated/uapi/asm/fcntl.h<br>  WRAP    arch/x86/include/generated/uapi/asm/ioctl.h<br>  WRAP    arch/x86/include/generated/uapi/asm/ioctls.h<br>  WRAP    arch/x86/include/generated/uapi/asm/ipcbuf.h<br>  WRAP    arch/x86/include/generated/uapi/asm/param.h<br>  WRAP    arch/x86/include/generated/uapi/asm/poll.h<br>  WRAP    arch/x86/include/generated/uapi/asm/resource.h<br></code></pre>\n<p>Una vez compilado el kernel, instalaremos el paquete .deb que se ha generado con el siguiente comando:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> dpkg -i <span class=\"token punctuation\">..</span>/linux-image-6.0.3_6.0.3-1_amd64.deb</code></pre>\n<p>Ahora que está instalado el kernel, probaremos que funciona, para ello tendremos que reiniciar nuestra máquina y en <em>Advanced Options for Debian GNU/Linux</em> seleccionaremos el nuevo kernel. Probaremos que todo funciona correctamente y volveremos a reiniciar y entraremos con el kernel que usamos habitualmente. Como podemos comprobar después de reiniciar, estamos usando el kernel 6.0.3.</p>\n<p><img src=\"/img/ASO-P6.4.png\" alt=\"ASO-P6.4.png\"></p>\n<p>Ahora, realizaremos una nueva compilación y antes que nada, eliminaremos los ficheros residuales de la compilación. Para ello utilizaremos el siguiente comando.</p>\n<p><img src=\"/img/ASO-P6.5.png\" alt=\"ASO-P6.5.png\"></p>\n<p>Para esta compilación, no vamos a usar los parametros <em>oldconfig</em> ni <em>localmodconfig</em>, usaremos <em>xconfig</em> que es una aplicación gráfica para instalar los componentes a mano. Primero que nada instalaremos una dependencia:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> pkg-config</code></pre>\n<p>Ahora procederemos a hacer el make xconfig, nos aparecerá una ventana como la de la siguiente imagen y simplemente tenemos que quitar los módulos que no vayamos a usar en el kernel desenmarcando las casillas. Es un proceso largo y lento pero es sencillo de hacer.</p>\n<p><img src=\"/img/ASO-P6.6.png\" alt=\"ASO-P6.6.png\"></p>\n<p>Volvemos a contar cuantos módulos tiene el kernel:</p>\n<p><img src=\"/img/ASO-P6.7.png\" alt=\"ASO-P6.7.png\"></p>\n<h2 id=\"documento-realizado-por%3A\" tabindex=\"-1\"><strong>Documento realizado por:</strong></h2>\n<p>✒️ <strong>Alejandro Montes Delgado</strong> - <em>2º ASIR</em></p>\n",
      "date_published": "2022-11-10T00:00:00Z"
    },{
      "id": "https://reeseschultz.github.io/11r/post/prueba2/",
      "url": "https://reeseschultz.github.io/11r/post/prueba2/",
      "title": "Prueba2",
      "content_html": "<p>Esto es la prueba 2</p>\n",
      "date_published": "2016-10-09T00:00:00Z"
    },{
      "id": "https://reeseschultz.github.io/11r/post/prueba3/",
      "url": "https://reeseschultz.github.io/11r/post/prueba3/",
      "title": "Prueba3",
      "content_html": "<p>otra prueba mas\nEsto es la prueba 2</p>\n",
      "date_published": "2016-10-03T00:00:00Z"
    }
  ]
}